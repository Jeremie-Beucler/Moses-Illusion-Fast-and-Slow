knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)
library(questionr)
library(jtools)
library(ggpubr)
library(broom)
library(tinytex)
library(viridis)
library(ggbeeswarm)
library(corrplot)
library(afex)
library(jtools)
library(lme4)
library(ggridges)
library(knitr)
library(emmeans)
library(ggh4x)
library(effects)
library(webshot)
library(tidyverse)
library(papaja)
library(corrplot)
library(pastecs)
library(car)
library(lmerTest)
library(DHARMa)
library(performance)
library(glmmTMB)
library(betareg)
library(buildmer)
library(sandwich)
library(lmtest)
library(marginaleffects)
library(parallelly)
library(parameters)
library(effectsize)
library(rstatix)
library(coin)
library(png)
library(grid)
# write a function to return mean of a variable with sd in brackets
# args: name of the var, nb of decimals
mean_sd_function <- function(var, nb_decimals=0) {
mean_var =  round(mean(var, na.rm = TRUE), nb_decimals)
sd_var = round(sd(var, na.rm = TRUE), nb_decimals)
mean_sd = paste(mean_var, " (", sd_var, ")", sep="")
return(mean_sd)
}
# function to obtain the percentage of a given response for a given variable
percent_function <- function(response, var) {
percent = sum(var == response) / length(var) * 100
return(percent)
}
# effect size for Wilcoxon test
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p.value/2)
r<- z/ sqrt(N)
cat(wilcoxModel$data.name, "Effect Size, r = ", r)
}
# save load function
save_load <- function(object, mode) {
data_folder <- "../Data/"  # Specify the data folder path relative to your working directory
if (mode == "save") {
# Save the object as an .rds file with the object name in the specified folder
file_name <- paste0(data_folder, deparse(substitute(object)), ".rds")
saveRDS(object, file_name)
cat("Object saved as", file_name, "\n")
} else if (mode == "load") {
# Load the object from the .rds file with the object name in the specified folder
file_name <- paste0(data_folder, deparse(substitute(object)), ".rds")
if (file.exists(file_name)) {
object <- readRDS(file_name)
cat("Object loaded from", file_name, "\n")
return(object)
} else {
cat("Error: File", file_name, "does not exist.\n")
}
} else {
cat("Error: Mode must be 'save' or 'load'.\n")
}
}
session_info(to_file = "R_code_data_analysis_session.log")
install.packages("session_info")
install.packages("sessioninfo")
install.packages("pander")
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)
main_analysis_session_info <- session_info()
library(questionr)
library(jtools)
library(ggpubr)
library(broom)
library(tinytex)
library(viridis)
library(ggbeeswarm)
library(corrplot)
library(afex)
library(jtools)
library(lme4)
library(ggridges)
library(knitr)
library(emmeans)
library(ggh4x)
library(effects)
library(webshot)
library(tidyverse)
library(papaja)
library(corrplot)
library(pastecs)
library(car)
library(lmerTest)
library(DHARMa)
library(performance)
library(glmmTMB)
library(betareg)
library(buildmer)
library(sandwich)
library(lmtest)
library(marginaleffects)
library(parallelly)
library(parameters)
library(effectsize)
library(rstatix)
library(coin)
library(png)
library(grid)
# write a function to return mean of a variable with sd in brackets
# args: name of the var, nb of decimals
mean_sd_function <- function(var, nb_decimals=0) {
mean_var =  round(mean(var, na.rm = TRUE), nb_decimals)
sd_var = round(sd(var, na.rm = TRUE), nb_decimals)
mean_sd = paste(mean_var, " (", sd_var, ")", sep="")
return(mean_sd)
}
# function to obtain the percentage of a given response for a given variable
percent_function <- function(response, var) {
percent = sum(var == response) / length(var) * 100
return(percent)
}
# effect size for Wilcoxon test
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p.value/2)
r<- z/ sqrt(N)
cat(wilcoxModel$data.name, "Effect Size, r = ", r)
}
# save load function
save_load <- function(object, mode) {
data_folder <- "../Data/"  # Specify the data folder path relative to your working directory
if (mode == "save") {
# Save the object as an .rds file with the object name in the specified folder
file_name <- paste0(data_folder, deparse(substitute(object)), ".rds")
saveRDS(object, file_name)
cat("Object saved as", file_name, "\n")
} else if (mode == "load") {
# Load the object from the .rds file with the object name in the specified folder
file_name <- paste0(data_folder, deparse(substitute(object)), ".rds")
if (file.exists(file_name)) {
object <- readRDS(file_name)
cat("Object loaded from", file_name, "\n")
return(object)
} else {
cat("Error: File", file_name, "does not exist.\n")
}
} else {
cat("Error: Mode must be 'save' or 'load'.\n")
}
}
library(pander)
library(sessioninfo)
main_analysis_session_info <- session_info()
pander(demo.Rmd_session_2019_11_15)
pander(main_analysis_session_info)
knitr::kable(main_analysis_session_info, format = "markdown")
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)
library(questionr)
library(jtools)
library(ggpubr)
library(broom)
library(tinytex)
library(viridis)
library(ggbeeswarm)
library(corrplot)
library(afex)
library(jtools)
library(lme4)
library(ggridges)
library(knitr)
library(emmeans)
library(ggh4x)
library(effects)
library(webshot)
library(tidyverse)
library(papaja)
library(corrplot)
library(pastecs)
library(car)
library(lmerTest)
library(DHARMa)
library(performance)
library(glmmTMB)
library(betareg)
library(buildmer)
library(sandwich)
library(lmtest)
library(marginaleffects)
library(parallelly)
library(parameters)
library(effectsize)
library(rstatix)
library(coin)
library(png)
library(grid)
# write a function to return mean of a variable with sd in brackets
# args: name of the var, nb of decimals
mean_sd_function <- function(var, nb_decimals=0) {
mean_var =  round(mean(var, na.rm = TRUE), nb_decimals)
sd_var = round(sd(var, na.rm = TRUE), nb_decimals)
mean_sd = paste(mean_var, " (", sd_var, ")", sep="")
return(mean_sd)
}
# function to obtain the percentage of a given response for a given variable
percent_function <- function(response, var) {
percent = sum(var == response) / length(var) * 100
return(percent)
}
# effect size for Wilcoxon test
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p.value/2)
r<- z/ sqrt(N)
cat(wilcoxModel$data.name, "Effect Size, r = ", r)
}
# save load function
save_load <- function(object, mode) {
data_folder <- "../Data/"  # Specify the data folder path relative to your working directory
if (mode == "save") {
# Save the object as an .rds file with the object name in the specified folder
file_name <- paste0(data_folder, deparse(substitute(object)), ".rds")
saveRDS(object, file_name)
cat("Object saved as", file_name, "\n")
} else if (mode == "load") {
# Load the object from the .rds file with the object name in the specified folder
file_name <- paste0(data_folder, deparse(substitute(object)), ".rds")
if (file.exists(file_name)) {
object <- readRDS(file_name)
cat("Object loaded from", file_name, "\n")
return(object)
} else {
cat("Error: File", file_name, "does not exist.\n")
}
} else {
cat("Error: Mode must be 'save' or 'load'.\n")
}
}
library(sessioninfo)
main_analysis_session_info <- session_info()
# save it as a text file
writeLines(main_analysis_session_info, "../session_info_main_analysis.txt")
# save it as a text file
writeLines(main_analysis_session_info$packages, "../session_info_main_analysis.txt")
main_analysis_session_info$packages
# save it as a text file
writeLines(as.data.frame(main_analysis_session_info$packages), "../session_info_main_analysis.txt")
a = main_analysis_session_info$packages
a = tidy(main_analysis_session_info$packages)
# save it as a csv file
write.csv(main_analysis_session_info$packages, "../session_info_main_analysis.csv", row.names = FALSE)
library(questionr)
library(jtools)
library(ggpubr)
library(broom)
library(tinytex)
library(viridis)
library(ggbeeswarm)
library(corrplot)
library(afex)
library(jtools)
library(lme4)
library(ggridges)
library(knitr)
library(emmeans)
library(ggh4x)
library(effects)
library(webshot)
library(tidyverse)
library(papaja)
library(corrplot)
library(pastecs)
library(car)
library(lmerTest)
library(DHARMa)
library(performance)
library(glmmTMB)
library(betareg)
library(buildmer)
library(sandwich)
library(lmtest)
library(marginaleffects)
library(parallelly)
library(parameters)
library(effectsize)
library(rstatix)
library(coin)
library(png)
library(grid)
# write a function to return mean of a variable with sd in brackets
# args: name of the var, nb of decimals
mean_sd_function <- function(var, nb_decimals=0) {
mean_var =  round(mean(var, na.rm = TRUE), nb_decimals)
sd_var = round(sd(var, na.rm = TRUE), nb_decimals)
mean_sd = paste(mean_var, " (", sd_var, ")", sep="")
return(mean_sd)
}
# function to obtain the percentage of a given response for a given variable
percent_function <- function(response, var) {
percent = sum(var == response) / length(var) * 100
return(percent)
}
# effect size for Wilcoxon test
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p.value/2)
r<- z/ sqrt(N)
cat(wilcoxModel$data.name, "Effect Size, r = ", r)
}
# save load function
save_load <- function(object, mode) {
data_folder <- "../Data/"  # Specify the data folder path relative to your working directory
if (mode == "save") {
# Save the object as an .rds file with the object name in the specified folder
file_name <- paste0(data_folder, deparse(substitute(object)), ".rds")
saveRDS(object, file_name)
cat("Object saved as", file_name, "\n")
} else if (mode == "load") {
# Load the object from the .rds file with the object name in the specified folder
file_name <- paste0(data_folder, deparse(substitute(object)), ".rds")
if (file.exists(file_name)) {
object <- readRDS(file_name)
cat("Object loaded from", file_name, "\n")
return(object)
} else {
cat("Error: File", file_name, "does not exist.\n")
}
} else {
cat("Error: Mode must be 'save' or 'load'.\n")
}
}
library(sessioninfo)
main_analysis_session_info <- session_info()
# save it as a csv file
write.csv(main_analysis_session_info$packages, "../session_info_main_analysis.csv", row.names = FALSE)
